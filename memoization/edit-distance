class Solution {
private:
    int minOperation(string &word1,string &word2,int i,int j, vector<vector<int>>&dp){
        if(i<0)return j+1;
        if(j<0)return i+1;
        if(dp[i][j]!=-1)return dp[i][j];
        if(word1[i]==word2[j])
            return dp[i][j] =  0 + minOperation(word1,word2,i-1,j-1,dp);
        else
            return dp[i][j] = min({1+minOperation(word1,word2,i,j-1,dp),1+minOperation(word1,word2,i-1,j,dp),1+minOperation(word1,word2,i-1,j-1,dp)});
    }
public:
    int minDistance(string word1, string word2) {
        int n = size(word1);
        int m = size(word2);
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return minOperation(word1,word2,n-1,m-1,dp);
    }
};
// TC : O(N*M)
// SC: O(N*M) + O(N+M)
